{"version":3,"sources":["../src/candlestick_ctrl.js"],"names":["MetricsPanelCtrl","_","kbn","TimeSeries","rendering","colors","appEvents","CandleStickCtrl","$scope","$injector","$rootScope","hiddenSeries","panelDefaults","datasource","mode","widthMode","maxDataPoints","candlestickWidth","bullColor","bearColor","dojiColor","solidColor","barColor","swapYaxes","labelY1","labelY2","colorizeTooltip","transparentTooltip","tooltipFormat","indicators","defaults","panel","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","seriesToAlias","open","value","alias","close","low","high","addEditorTab","subItem","format","render","series","data","parseSeries","seriesOverrides","applySeriesOverrides","undefined","keys","filter","indexOf","dp","length","result","Array","index","i","dataList","map","item","seriesHandler","refreshColors","seriesData","datapoints","target","flotpairs","getFlotPairs","nullPointMode","j","color","linewidth","fill","scope","elem","attrs","ctrl","serie","label","takeRight","templateUrl"],"mappings":"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","file":"candlestick_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series';\nimport rendering from './rendering';\nimport colors from './colors';\nimport appEvents from 'app/core/app_events';\n\nexport class CandleStickCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n    this.hiddenSeries = {};\n\n    let panelDefaults = {\n      datasource: null,\n      mode: 'color',\n      widthMode: 'auto',\n      maxDataPoints: 80,\n      candlestickWidth: 9,\n\n      bullColor: '#26ff42',\n      bearColor: '#ff4a3a',\n      dojiColor: '#c8c9ca',\n      solidColor: '#000000',\n      barColor: '#000000',\n\n      swapYaxes: true,\n      labelY1: null,\n      labelY2: null,\n\n      colorizeTooltip: true,\n      transparentTooltip: false,\n      tooltipFormat: 'YYYY-MM-DD HH:mm:ss',\n\n      indicators: [],\n    };\n\n    _.defaults(this.panel, panelDefaults);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.seriesToAlias();\n  }\n\n  seriesToAlias() {\n    if (typeof(this.panel.open) !== 'object') {\n      return;\n    }\n    let value = this.panel.open.alias;\n    this.panel.open = value;\n\n    value = this.panel.close.alias;\n    this.panel.close = value;\n\n    value = this.panel.low.alias;\n    this.panel.low = value;\n\n    value = this.panel.high.alias;\n    this.panel.high = value;\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/ilgizar-candlestick-panel/partials/editor.html', 2);\n    this.addEditorTab('Indicators', 'public/plugins/ilgizar-candlestick-panel/partials/indicators.html', 3);\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onRender() {\n    if (!this.series) {\n      return;\n    }\n\n    this.data = this.parseSeries(this.series);\n\n    if (this.panel.seriesOverrides) {\n      for (let series of this.series) {\n        series.applySeriesOverrides(this.panel.seriesOverrides);\n      }\n    }\n  }\n\n  parseSeries(series) {\n\n    if (series === undefined) {\n      return series;\n    }\n    // series must contain aliased datapoints\n    // open, high, low, and close, otherwise\n    // do not parse any further.\n    const keys = ['open', 'high', 'low', 'close'];\n    if (series.filter(dp => (keys.indexOf(dp.alias) > -1)).length < 4) {\n      return [];\n    }\n\n    let result = new Array(4);\n    let index = 4;\n    for (let i = 0; i < series.length; i++) {\n      if (series[i] !== undefined) {\n        switch (series[i].alias) {\n          case 'open':\n            result[0] = series[i];\n            break;\n          case 'close':\n            result[1] = series[i];\n            break;\n          case 'low':\n            result[2] = series[i];\n            break;\n          case 'high':\n            result[3] = series[i];\n            break;\n          default:\n            result[index++] = series[i];\n            break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map((item, index) => {\n      return this.seriesHandler(item, index);\n    });\n    this.refreshColors();\n    this.data = this.parseSeries(this.series);\n    this.render(this.data);\n  }\n\n  seriesHandler(seriesData, index) {\n    let series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  refreshColors() {\n    for (let i = 4; i < this.series.length; i++) {\n      if (this.series[i] !== undefined) {\n        var index = -1;\n        if (this.panel.seriesOverrides !== undefined) {\n          for (let j = 0; j < this.panel.seriesOverrides.length; j++) {\n            if (this.panel.seriesOverrides[j].alias === this.series[i].alias) {\n              index = j;\n              break;\n            }\n          }\n        }\n        if (index < 0) {\n          if (this.panel.seriesOverrides === undefined) {\n            this.panel.seriesOverrides = [];\n          }\n          index = this.panel.seriesOverrides.length;\n          this.panel.seriesOverrides[index] = {\n            alias: this.series[i].alias,\n            color: colors[index % colors.length],\n            linewidth: 1,\n            fill: 0\n          };\n        }\n        this.series[i].color = this.panel.seriesOverrides[index].color;\n      }\n    }\n  }\n\n  changeColor() {\n    this.refreshColors();\n    this.render();\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n  toggleSeries(serie) {\n    if (this.hiddenSeries[serie.label]) {\n      delete this.hiddenSeries[serie.alias];\n    } else {\n      this.hiddenSeries[serie.label] = true;\n    }\n    this.render();\n  }\n\n  getIndicators() {\n    return this.series ? _.takeRight(this.series, this.series.length - 4) : [];\n  }\n}\n\nCandleStickCtrl.templateUrl = 'partials/module.html';\n"]}