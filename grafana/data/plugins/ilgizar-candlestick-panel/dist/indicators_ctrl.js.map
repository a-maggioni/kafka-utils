{"version":3,"sources":["../src/indicators_ctrl.js"],"names":["_","angular","IndicatorsCtrl","$scope","$element","popoverSrv","defColor","defMode","defLineWidth","defLineFill","defPointRadius","defZindex","defYaxis","getOverride","ctrl","panel","seriesOverrides","list","filter","alias","indicator","length","updateCurrentOverrides","currentOverrides","value","override","color","isUndefined","push","name","propertyName","lines","bars","bras","points","linewidth","fill","parseInt","pointradius","zindex","yaxis","updateOverride","render","module","controller"],"mappings":"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","file":"indicators_ctrl.js","sourcesContent":["import _ from 'lodash';\nimport angular from 'angular';\n\nexport class IndicatorsCtrl {\n  /** @ngInject */\n  constructor($scope, $element, popoverSrv) {\n    var defColor = '#ffffff';\n    var defMode = 'lines';\n    var defLineWidth = 1;\n    var defLineFill = 0;\n    var defPointRadius = 5;\n    var defZindex = 0;\n    var defYaxis = 1;\n\n    $scope.getOverride = function() {\n      if (!$scope.ctrl.panel.seriesOverrides) {\n        return [];\n      }\n\n      var list = _.filter($scope.ctrl.panel.seriesOverrides, { alias: $scope.indicator.alias });\n      return list.length > 0 ? list[0] : [];\n    };\n\n    $scope.updateCurrentOverrides = function() {\n      $scope.currentOverrides = [];\n      var value = $scope.override.color;\n      if (_.isUndefined(value)) {\n        value = defColor;\n      }\n      $scope.currentOverrides.push({\n        name: 'Color',\n        propertyName: 'color',\n        value: value,\n      });\n\n      var lines = $scope.override.lines;\n      if (_.isUndefined(lines)) {\n        lines = defMode === 'lines';\n      }\n      var bars = $scope.override.bars;\n      if (_.isUndefined(lines)) {\n        bras = defMode === 'bars';\n      }\n      var points = $scope.override.points;\n      if (_.isUndefined(lines)) {\n        points = defMode === 'points';\n      }\n      $scope.currentOverrides.push({\n        name: 'Draw mode',\n        propertyName: 'mode',\n        value: bars ? 'bars' : points ? 'points' : 'lines',\n      });\n\n      value = $scope.override.linewidth;\n      if (_.isUndefined(value)) {\n        value = defLineWidth;\n      }\n      $scope.currentOverrides.push({\n        name: 'Line width',\n        propertyName: 'linewidth',\n        value: value,\n      });\n\n      value = $scope.override.fill;\n      if (_.isUndefined(value)) {\n        value = defLineFill;\n      }\n      $scope.currentOverrides.push({\n        name: 'Fill opacity',\n        propertyName: 'fill',\n        value:  parseInt(value) * 10,\n      });\n\n      value = $scope.override.pointradius;\n      if (_.isUndefined(value)) {\n        value = defPointRadius;\n      }\n      $scope.currentOverrides.push({\n        name: 'Points radius',\n        propertyName: 'pointradius',\n        value: value,\n      });\n\n      value = $scope.override.zindex;\n      if (_.isUndefined(value)) {\n        value = defZindex;\n      }\n      $scope.currentOverrides.push({\n        name: 'Z-index',\n        propertyName: 'zindex',\n        value: value,\n      });\n\n      value = $scope.override.yaxis;\n      if (_.isUndefined(value)) {\n        value = defYaxis;\n      }\n      $scope.currentOverrides.push({\n        name: 'Y-axis',\n        propertyName: 'yaxis',\n        value: value === 2 ? 'other' : 'price',\n      });\n     };\n\n    $scope.updateOverride = function() {\n      $scope.override.color = $scope.currentOverrides[0].value;\n      $scope.override.lines = $scope.currentOverrides[1].value === 'lines';\n      $scope.override.bars = $scope.currentOverrides[1].value === 'bars';\n      $scope.override.points = $scope.currentOverrides[1].value === 'points';\n      $scope.override.linewidth = $scope.currentOverrides[2].value;\n      $scope.override.fill = parseInt($scope.currentOverrides[3].value) / 10;\n      $scope.override.pointradius = $scope.currentOverrides[4].value;\n      $scope.override.zindex = $scope.currentOverrides[5].value;\n      $scope.override.yaxis = $scope.currentOverrides[6].value === 'other' ? 2 : 1;\n      $scope.ctrl.render();\n    };\n\n    $scope.currentOverrides = [];\n    $scope.override = $scope.getOverride();\n    if (!$scope.override || $scope.override.length === 0) {\n      var override = {\n        'alias': $scope.indicator.alias,\n        'color': defColor,\n        'lines': defMode === 'lines',\n        'bars': defMode === 'bars',\n        'points': defMode === 'points',\n        'linewidth': defLineWidth,\n        'fill': defLineFill,\n        'pointradius': defPointRadius,\n        'zindex': defZindex,\n        'yaxis': defYaxis,\n      };\n      if (!$scope.ctrl.panel.seriesOverrides) {\n        $scope.ctrl.panel.seriesOverrides = [];\n      }\n      $scope.ctrl.panel.seriesOverrides.push(override);\n      $scope.override = $scope.getOverride();\n    }\n    $scope.updateCurrentOverrides();\n  }\n}\n\nangular.module('grafana.controllers').controller('IndicatorsCtrl', IndicatorsCtrl);\n"]}